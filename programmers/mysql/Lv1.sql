-- 과일로 만든 아이스크림 고르기
SELECT half.FLAVOR 
FROM FIRST_HALF half
INNER JOIN ICECREAM_INFO info
ON half.FLAVOR = info.FLAVOR
WHERE half.TOTAL_ORDER >= 3000 and info.INGREDIENT_TYPE = 'fruit_based'
ORDER BY TOTAL_ORDER DESC;

-- 모든 레코드 출력하기
SELECT * FROM ANIMAL_INS ORDER BY ANIMAL_ID;

-- 자동차 대여 기록에서 장기_단기 대여 구분하기
SELECT HISTORY_ID, CAR_ID, 
    DATE_FORMAT(START_DATE, '%Y-%m-%d') AS START_DATE, 
    DATE_FORMAT(END_DATE, '%Y-%m-%d') AS END_DATE, 
    IF(DATEDIFF(END_DATE, START_DATE)>=29, '장기 대여', '단기 대여') AS RENT_TYPE
FROM CAR_RENTAL_COMPANY_RENTAL_HISTORY
WHERE START_DATE LIKE '2022-09%'
ORDER BY HISTORY_ID DESC;

-- 조건에 부합하는 중고거래 댓글 조회하기
SELECT 
    board.TITLE, 
    board.BOARD_ID, 
    reply.REPLY_ID, 
    reply.WRITER_ID, 
    reply.CONTENTS, 
    DATE_FORMAT(reply.CREATED_DATE,'%Y-%m-%d') AS CREATED_DATE
FROM 
    USED_GOODS_REPLY reply
INNER JOIN 
    USED_GOODS_BOARD board
ON 
    reply.BOARD_ID = board.BOARD_ID
WHERE
    DATE_FORMAT(board.CREATED_DATE, '%Y-%m') = '2022-10'
ORDER BY 
    reply.CREATED_DATE, TITLE;

-- 최댓값 구하기
SELECT DATETIME AS 시간 
FROM ANIMAL_INS 
ORDER BY DATETIME DESC LIMIT 1;

-- 특정 옵션이 포함된 자동차 리스트 구하기
SELECT CAR_ID, CAR_TYPE, DAILY_FEE, OPTIONS
FROM CAR_RENTAL_COMPANY_CAR
WHERE OPTIONS LIKE '%네비게이션%'
ORDER BY CAR_ID DESC;

-- 평균 일일 대여 요금 구하기
SELECT ROUND(AVG(DAILY_FEE)) as AVERAGE_FEE 
FROM CAR_RENTAL_COMPANY_CAR
WHERE CAR_TYPE = 'SUV';

-- 조건에 맞는 도서 리스트 출력하기
-- 방법1
SELECT 
    BOOK_ID, DATE_FORMAT(PUBLISHED_DATE, '%Y-%m-%d') AS PUBLISHED_DATE
FROM
    BOOK 
WHERE
    CATEGORY = '인문'
    AND
    DATE_FORMAT(PUBLISHED_DATE, '%Y')='2021'
ORDER BY PUBLISHED_DATE;

-- 방법2
SELECT 
    BOOK_ID, DATE_FORMAT(PUBLISHED_DATE, '%Y-%m-%d') AS PUBLISHED_DATE
FROM
    BOOK 
WHERE
    CATEGORY = '인문'
    AND
    PUBLISHED_DATE LIKE '2021%'
ORDER BY PUBLISHED_DATE;

-- 방법3
SELECT 
    BOOK_ID, DATE_FORMAT(PUBLISHED_DATE, '%Y-%m-%d') AS PUBLISHED_DATE
FROM
    BOOK 
WHERE
    CATEGORY = '인문'
    AND
    PUBLISHED_DATE BETWEEN '2021-01-01' AND '2021-12-31'
ORDER BY PUBLISHED_DATE;

-- 인기있는 아이스크림
SELECT FLAVOR
FROM FIRST_HALF
ORDER BY TOTAL_ORDER DESC, SHIPMENT_ID;

-- 12세 이하인 여자 환자 목록 출력하기
SELECT PT_NAME, PT_NO, GEND_CD, AGE, IF(TLNO IS NULL, 'NONE', TLNO) AS TLNO
FROM PATIENT
WHERE AGE <= 12 AND GEND_CD = 'W'
ORDER BY AGE DESC, PT_NAME;

-- 조건에 맞는 회원수 구하기
SELECT COUNT(*) AS USERS 
FROM USER_INFO WHERE AGE>=20 AND AGE<=29 AND 
JOINED BETWEEN '2021-01-01' AND '2021-12-31';

-- 이름에 없는 동물의 아이디
SELECT ANIMAL_ID
FROM ANIMAL_INS
WHERE NAME IS NULL;

-- 흉부외과 또는 일반외과 의사 목록 출력하기
SELECT DR_NAME, DR_ID, MCDP_CD, DATE_FORMAT(HIRE_YMD, '%Y-%m-%d')
FROM DOCTOR
WHERE MCDP_CD = 'CS' OR MCDP_CD = 'GS'
ORDER BY HIRE_YMD DESC, DR_NAME;

-- 강원도에 위치한 생산공장 목록 출력하기
SELECT FACTORY_ID, FACTORY_NAME, ADDRESS
FROM FOOD_FACTORY
WHERE ADDRESS LIKE '강원도%';

-- 경기도에 위치한 식품창고 목록 출력하기
SELECT WAREHOUSE_ID, WAREHOUSE_NAME, ADDRESS, IFNULL(FREEZER_YN, 'N') AS FREEZER_YN
FROM FOOD_WAREHOUSE
WHERE ADDRESS LIKE '경기도%';

-- 가장 비싼 상품 구하기
SELECT MAX(PRICE) AS MAX_PRICE FROM PRODUCT;

-- 나이 정보가 없는 회원 수 구하기
SELECT COUNT(*) as USERS FROM USER_INFO
WHERE AGE IS NULL;

-- 이름이 있는 동물의 아이디
SELECT ANIMAL_ID
FROM ANIMAL_INS
WHERE NAME IS NOT NULL;

-- 동물의 아이디와 이름
SELECT ANIMAL_ID, NAME FROM ANIMAL_INS ORDER BY ANIMAL_ID;

-- 아픈 동물 찾기
SELECT ANIMAL_ID, NAME FROM ANIMAL_INS 
WHERE INTAKE_CONDITION = 'Sick' ORDER BY ANIMAL_ID;

-- 역순 정렬하기
SELECT NAME, DATETIME FROM ANIMAL_INS ORDER BY ANIMAL_ID DESC;

-- 상위 n개 레코드
SELECT NAME FROM ANIMAL_INS ORDER BY DATETIME LIMIT 1;

-- 여러 기준으로 정렬하기
SELECT ANIMAL_ID, NAME, DATETIME 
FROM ANIMAL_INS ORDER BY NAME, DATETIME DESC;

-- 어린 동물 찾기
SELECT ANIMAL_ID, NAME FROM ANIMAL_INS 
WHERE INTAKE_CONDITION!='Aged' ORDER BY ANIMAL_ID;